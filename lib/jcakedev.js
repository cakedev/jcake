// Generated by CoffeeScript 1.3.3

/*
jCaKeDev 1.3.1
cakedevp.github.com/jcakedev
*/


(function() {
  var Attachable, Combo, Panel, Slideshow, TabControl, Table, Tooltip, jcakedev,
    __slice = [].slice;

  jcakedev = {
    plugins: {},
    components: [],
    getComponent: function($el) {
      var comp, component, id, _i, _len, _ref;
      id = $el.data("cakeId");
      component = null;
      _ref = this.components;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        comp = _ref[_i];
        if (comp.id === id) {
          component = comp;
          break;
        }
      }
      return component;
    },
    addComponent: function(comp) {
      comp.id = this.newID();
      comp.el.data("cakeId", comp.id);
      return this.components.push(comp);
    },
    removeComponent: function(id) {
      var comp, i, index, _i, _len, _ref;
      index = -1;
      _ref = this.components;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        comp = _ref[i];
        if (comp.id === id) {
          index = i;
          break;
        }
      }
      if (index > -1) {
        return this.components.splice(index, 1);
      }
    },
    notify: function(text) {
      return console.log(text);
    },
    newID: function() {
      return Math.random().toString().substring(2);
    },
    init: function($) {
      var plugin, _results;
      _results = [];
      for (plugin in this.plugins) {
        _results.push(this.plugins[plugin].init(this));
      }
      return _results;
    }
  };

  jcakedev.plugins.combo = {
    pluginManager: null,
    init: function(pm) {
      var me;
      this.pluginManager = pm;
      me = this;
      return $.fn.cakeCombo = function() {
        var action, args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (typeof args[0] === "string") {
          action = args[0];
          switch (action) {
            case "getValue":
              return me.getValue(this);
            case "setValue":
              me.setValue(this, args[1]);
              break;
            default:
              pm.notify("'" + action + "' is not a valid action for cakeCombo");
          }
        } else {
          me.create(this, typeof args[0] === "object" ? args[0] : {});
        }
        return this;
      };
    },
    create: function($obj, params) {
      var defaultValue, delegate, me, options;
      me = this;
      if ((params.options != null) && params.options.length) {
        options = params.options;
        delegate = params.delegate;
        defaultValue = params.defaultValue;
        return $obj.each(function() {
          var combo;
          combo = new Combo($(this), options, delegate);
          if (defaultValue != null) {
            combo.setValue(defaultValue);
          }
          return me.pluginManager.addComponent(combo);
        });
      } else {
        return this.pluginManager.notify("No options were defined for cakeCombo");
      }
    },
    getValue: function($obj) {
      var $el, combo, i, values;
      if ($obj.length > 1) {
        return values = (function() {
          var _i, _ref, _results;
          _results = [];
          for (i = _i = 0, _ref = $obj.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            $el = $obj.eq(i);
            combo = this.pluginManager.getComponent($el);
            if (!(combo != null)) {
              continue;
            }
            _results.push(combo.getValue());
          }
          return _results;
        }).call(this);
      } else {
        combo = this.pluginManager.getComponent($obj);
        if (combo != null) {
          return combo.getValue();
        } else {
          return null;
        }
      }
    },
    setValue: function($obj, value) {
      var $el, combo, i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = $obj.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        $el = $obj.eq(i);
        combo = this.pluginManager.getComponent($el);
        if (combo != null) {
          _results.push(combo.setValue(value));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  };

  Combo = (function() {

    function Combo(el, options, delegate) {
      var $comboElement, me;
      this.el = el;
      this.options = options;
      this.delegate = delegate;
      this.selectedIndex = 0;
      this.el.addClass("-cakedev-combo");
      $comboElement = $("<table class='-cakedev-combo-element' />");
      $comboElement.append("<tr>" + "<td class='-cakedev-combo-optionText'></td>" + "<td class='-cakedev-combo-arrow'><span class='-cakedev-arrow -cakedev-arrow-down-black'></span></td>" + "</tr>");
      this.el.append($comboElement);
      this.setOptions();
      this.setCurrentOption();
      me = this;
      $comboElement.on("mouseenter", function() {
        me.showList(true);
        return me.setFocus(true);
      });
      $comboElement.on("mouseleave", function(event) {
        var $target;
        $target = event.toElement != null ? $(event.toElement) : $(event.relatedTarget);
        if (!$target.hasClass("-cakedev-combo-list-container") && !$target.closest(".-cakedev-combo-list-container").length) {
          me.hideList(true);
          me.setFocus(false);
        }
        return true;
      });
    }

    Combo.prototype.showList = function(animate) {
      var $el;
      $el = this.el.children(".-cakedev-combo-list-container");
      $el.stop().show();
      if (animate) {
        return $el.animate({
          opacity: 1.0
        }, 200);
      } else {
        return $el.css("opacity", 1.0);
      }
    };

    Combo.prototype.hideList = function(animate) {
      var $el;
      $el = this.el.children(".-cakedev-combo-list-container");
      if (animate) {
        return $el.stop().animate({
          opacity: 0
        }, 200, function() {
          return $el.hide();
        });
      } else {
        $el.stop().hide();
        return $el.css("opacity", 0);
      }
    };

    Combo.prototype.setOptions = function() {
      var $list, $listContainer, me, option, _i, _len, _ref;
      me = this;
      $listContainer = $("<div class='-cakedev-combo-list-container' />");
      $list = $("<ul />");
      _ref = this.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        $list.append("<li>" + option.text + "</li>");
      }
      $listContainer.append($list);
      $list.children("li").each(function(index) {
        return $(this).on("click", function(event) {
          if (me.selectedIndex !== index) {
            if (typeof me.delegate === "function") {
              me.delegate.call(me.el, me.options[index]);
            }
            me.setValue(me.options[index].value);
            me.setFocus(false);
            me.hideList(false);
            return true;
          }
        });
      });
      $listContainer.on("mouseleave", function(event) {
        var $target;
        $target = event.toElement != null ? $(event.toElement) : $(event.relatedTarget);
        if (!$target.hasClass("-cakedev-combo-element") && !$target.closest(".-cakedev-combo-element").length) {
          me.hideList(true);
          me.setFocus(false);
        }
        return true;
      });
      return this.el.append($listContainer);
    };

    Combo.prototype.setCurrentOption = function() {
      var $options;
      this.el.children("table").find(".-cakedev-combo-optionText").text(this.options[this.selectedIndex].text);
      $options = this.el.children(".-cakedev-combo-list-container").children("ul").children("li");
      $options.removeClass("-cakedev-combo-selectedOption");
      return $options.eq(this.selectedIndex).addClass("-cakedev-combo-selectedOption");
    };

    Combo.prototype.setFocus = function(focus) {
      if (focus) {
        return this.el.children(".-cakedev-combo-element").addClass("-cakedev-combo-focused");
      } else {
        return this.el.children(".-cakedev-combo-element").removeClass("-cakedev-combo-focused");
      }
    };

    Combo.prototype.setValue = function(value) {
      var i, option, _i, _len, _ref;
      if (this.getValue() !== value) {
        _ref = this.options;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          option = _ref[i];
          if (option.value === value) {
            this.selectedIndex = i;
            break;
          }
        }
        return this.setCurrentOption();
      }
    };

    Combo.prototype.getValue = function() {
      return this.options[this.selectedIndex].value;
    };

    return Combo;

  })();

  jcakedev.plugins.tabs = {
    pluginManager: null,
    init: function(pm) {
      var me;
      this.pluginManager = pm;
      me = this;
      return $.fn.cakeTabs = function() {
        var action, args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (typeof args[0] === "string") {
          action = args[0];
          switch (action) {
            case "getCurrent":
              pm.notify("Not implemented yet");
              break;
            default:
              pm.notify("'" + action + "' is not a valid action for cakeTabs");
          }
        } else {
          me.create(this, typeof args[0] === "object" ? args[0] : {});
        }
        return this;
      };
    },
    create: function($obj, params) {
      var direction, me;
      me = this;
      direction = params.direction != null ? params.direction : "top";
      return $obj.each(function() {
        var tabControl;
        tabControl = new TabControl($(this), direction);
        return me.pluginManager.addComponent(tabControl);
      });
    }
  };

  TabControl = (function() {

    function TabControl(el, direction) {
      var $tab, $tabHeaders, $tabHeadersContainer, $tabs, i, me, tabHeaderClass, tabHeadersContent, tabTitle, _i, _j, _ref, _ref1;
      this.el = el;
      this.direction = direction;
      this.currentTabIndex = 0;
      this.el.addClass("-cakedev-tabs");
      tabHeaderClass = this.direction === "bottom" ? "-cakedev-tabHeader-bottom" : "-cakedev-tabHeader-top";
      $tabHeadersContainer = $("<div class='-cakedev-tabHeaders-container'></div>'");
      $tabs = this.el.children("div");
      if ($tabs.length) {
        tabHeadersContent = "";
        for (i = _i = 0, _ref = $tabs.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          $tab = $tabs.eq(i);
          $tab.addClass("-cakedev-tab");
          tabTitle = $tab.attr("title") ? $tab.attr("title") : i;
          $tab.removeAttr("title");
          tabHeadersContent += "<td><span class='-cakedev-tabHeader " + tabHeaderClass + "'>" + tabTitle + "</span></td>";
        }
        if (this.direction === "bottom") {
          this.el.append($tabHeadersContainer);
        } else {
          this.el.prepend($tabHeadersContainer);
        }
        $tabHeadersContainer.append("<table><tr>" + tabHeadersContent + "</tr></table>");
        $tabHeaders = $tabHeadersContainer.find(".-cakedev-tabHeader");
        me = this;
        for (i = _j = 0, _ref1 = $tabHeaders.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          $tabHeaders.eq(i).data("cakedevIndex", i);
          $tabHeaders.eq(i).on("click", function() {
            var $currentTabControl, $headersContainer;
            $currentTabControl = $(this).closest(".-cakedev-tabs");
            $headersContainer = $(this).closest(".-cakedev-tabHeaders-container");
            me.currentTabIndex = $(this).data("cakedevIndex");
            return me.setCurrentTab();
          });
        }
        this.currentTabIndex = 0;
        this.setCurrentTab();
      }
    }

    TabControl.prototype.setCurrentTab = function() {
      var $headers;
      $headers = this.el.children(".-cakedev-tabHeaders-container").find(".-cakedev-tabHeader");
      $headers.removeClass("-cakedev-selected-tab");
      $headers.eq(this.currentTabIndex).addClass("-cakedev-selected-tab");
      return this.el.children(".-cakedev-tab").hide().eq(this.currentTabIndex).show();
    };

    return TabControl;

  })();

  jcakedev.plugins.slideshow = {
    pluginManager: null,
    init: function(pm) {
      var me;
      this.pluginManager = pm;
      me = this;
      return $.fn.cakeSlideshow = function() {
        var action, args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (typeof args[0] === "string") {
          action = args[0];
          switch (action) {
            case "moveNext":
              pm.notify("Not implemented yet");
              break;
            case "movePrevious":
              pm.notify("Not implemented yet");
              break;
            default:
              pm.notify("'" + action + "' is not a valid action for cakeSlideshow");
          }
        } else {
          me.create(this, typeof args[0] === "object" ? args[0] : {});
        }
        return this;
      };
    },
    create: function($obj, params) {
      var animationSpeed, autoNavigate, delay, disableNavigation, height, me, navigationMargin, rotate;
      height = params.height;
      disableNavigation = params.disableNavigation != null ? params.disableNavigation : false;
      animationSpeed = params.animationSpeed != null ? params.animationSpeed : 400;
      autoNavigate = params.autoNavigate != null ? params.autoNavigate : true;
      delay = params.delay != null ? params.delay : 2000;
      rotate = params.rotate != null ? params.rotate : true;
      navigationMargin = params.navigationMargin != null ? params.navigationMargin : 20;
      me = this;
      return $obj.each(function() {
        var slideshow;
        slideshow = new Slideshow($(this), height, disableNavigation, animationSpeed, autoNavigate, delay, rotate, navigationMargin);
        return me.pluginManager.addComponent(slideshow);
      });
    }
  };

  Slideshow = (function() {

    function Slideshow(el, height, disableNavigation, animationSpeed, autoNavigate, delay, rotate, navigationMargin) {
      var $slide, fixedHeight, i, maxHeight, _i, _j, _ref, _ref1;
      this.el = el;
      this.height = height;
      this.disableNavigation = disableNavigation;
      this.animationSpeed = animationSpeed;
      this.autoNavigate = autoNavigate;
      this.delay = delay;
      this.rotate = rotate;
      this.navigationMargin = navigationMargin;
      this.currentIndex = 0;
      this.animating = false;
      fixedHeight = false;
      if (this.height != null) {
        fixedHeight = true;
        this.el.css("height", isNaN(this.height) ? this.height : "" + this.height + "px");
      }
      this.slides = this.el.children("div");
      this.el.addClass("-cakedev-slideshow");
      this.height = this.el.height();
      if (!fixedHeight) {
        maxHeight = 0;
        for (i = _i = 0, _ref = this.slides.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (this.slides.eq(i).height() > maxHeight) {
            maxHeight = this.slides.eq(i).height();
          }
        }
        height = maxHeight;
        this.el.css("height", "" + height + "px");
      }
      for (i = _j = 0, _ref1 = this.slides.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        $slide = this.slides.eq(i);
        $slide.addClass("-cakedev-slideshow-slide");
        $slide.css("height", "" + height + "px");
      }
      this.slides.not(":eq(0)").css("margin-left", "" + (this.el.width()) + "px");
      if (!this.disableNavigation) {
        this.setNavigationControls();
      }
      if (this.autoNavigate) {
        this.setAutoNavigation();
      }
    }

    Slideshow.prototype.setNavigationControls = function() {
      var $arrowleft, $arrowright, height, me, width;
      width = this.el.width();
      height = this.el.height();
      $arrowleft = $("<div class='-cakedev-slideshow-arrowleft' />");
      $arrowright = $("<div class='-cakedev-slideshow-arrowright' />");
      this.el.append($arrowleft);
      this.el.append($arrowright);
      $arrowleft.css("left", "" + this.navigationMargin + "px");
      $arrowright.css("left", (width - $arrowright.width() - this.navigationMargin) + "px");
      me = this;
      $arrowleft.on("click", function() {
        me.autoNavigate = false;
        return me.movePrevious();
      });
      return $arrowright.on("click", function() {
        me.autoNavigate = false;
        return me.moveNext();
      });
    };

    Slideshow.prototype.setAutoNavigation = function() {
      return this.navigate();
    };

    Slideshow.prototype.navigate = function() {
      var me;
      me = this;
      return setTimeout(function() {
        if (me.autoNavigate) {
          return me.moveNext(function() {
            return me.navigate();
          });
        }
      }, this.delay);
    };

    Slideshow.prototype.moveNext = function(callback, animationSpeed) {
      var me, speed;
      if (!this.animating) {
        if (this.slides.length > 1) {
          speed = animationSpeed != null ? animationSpeed : this.animationSpeed;
          if (this.currentIndex === this.slides.length - 1) {
            if (this.rotate) {
              speed = Math.round(speed / this.slides.length) + 100;
              return this.moveToFirst(speed, callback);
            }
          } else {
            me = this;
            this.animating = true;
            return this.changeSlide(this.slides.eq(this.currentIndex), this.slides.eq(this.currentIndex + 1), speed, "f", function() {
              me.animating = false;
              me.currentIndex++;
              if (typeof callback === "function") {
                return callback();
              }
            });
          }
        }
      }
    };

    Slideshow.prototype.movePrevious = function(callback, animationSpeed) {
      var me, speed;
      if (!this.animating) {
        if (this.slides.length > 1) {
          speed = animationSpeed != null ? animationSpeed : this.animationSpeed;
          if (this.currentIndex === 0) {
            if (this.rotate) {
              speed = Math.round(speed / this.slides.length) + 100;
              return this.moveToLast(speed, callback);
            }
          } else {
            me = this;
            this.animating = true;
            return this.changeSlide(this.slides.eq(this.currentIndex), this.slides.eq(this.currentIndex - 1), speed, "b", function() {
              me.animating = false;
              me.currentIndex--;
              if (typeof callback === "function") {
                return callback();
              }
            });
          }
        }
      }
    };

    Slideshow.prototype.moveToFirst = function(slideAnimationSpeed, callback) {
      var me;
      if (this.currentIndex > 0) {
        me = this;
        return this.movePrevious(function() {
          return me.moveToFirst(slideAnimationSpeed, callback);
        }, slideAnimationSpeed);
      } else {
        if (typeof callback === "function") {
          return callback();
        }
      }
    };

    Slideshow.prototype.moveToLast = function(slideAnimationSpeed, callback) {
      var me;
      if (this.currentIndex < this.slides.length - 1) {
        me = this;
        return this.moveNext(function() {
          return me.moveToLast(slideAnimationSpeed, callback);
        }, slideAnimationSpeed);
      } else {
        if (typeof callback === "function") {
          return callback();
        }
      }
    };

    Slideshow.prototype.changeSlide = function($current, $new, speed, direction, callback) {
      $current.css("z-index", 990);
      $new.css("z-index", 991);
      $new.animate({
        marginLeft: "0px"
      }, speed, "linear", function() {
        if (typeof callback === "function") {
          return callback();
        }
      });
      if (direction === "f") {
        return $current.animate({
          marginLeft: "-" + ($current.width()) + "px"
        }, speed, "linear");
      } else if (direction === "b") {
        return $current.animate({
          marginLeft: "" + ($current.width()) + "px"
        }, speed, "linear");
      }
    };

    return Slideshow;

  })();

  jcakedev.plugins.tooltip = {
    pluginManager: null,
    init: function(pm) {
      var me;
      this.pluginManager = pm;
      me = this;
      return $.fn.cakeTooltip = function() {
        var action, args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (typeof args[0] === "string") {
          action = args[0];
          switch (action) {
            case "setText":
              pm.notify("Not implemented yet");
              break;
            default:
              pm.notify("'" + action + "' is not a valid action for cakeTooltip");
          }
        } else {
          me.create(this, typeof args[0] === "object" ? args[0] : {});
        }
        return this;
      };
    },
    create: function($obj, params) {
      var animate, animationSpeed, direction, hMargin, me, text, vMargin;
      me = this;
      text = params.text != null ? params.text : "";
      direction = params.direction != null ? params.direction : "bottom";
      hMargin = params.hMargin != null ? params.hMargin : 10;
      vMargin = params.vMargin != null ? params.vMargin : 6;
      animate = params.animate != null ? params.animate : true;
      animationSpeed = params.animationSpeed != null ? params.animationSpeed : 200;
      return $obj.each(function() {
        var tooltip;
        tooltip = new Tooltip($(this), text, direction, hMargin, vMargin, animate, animationSpeed);
        return me.pluginManager.addComponent(tooltip);
      });
    }
  };

  Tooltip = (function() {

    function Tooltip(el, text, direction, hMargin, vMargin, animate, animationSpeed) {
      var me;
      this.el = el;
      this.text = text;
      this.direction = direction;
      this.hMargin = hMargin;
      this.vMargin = vMargin;
      this.animate = animate;
      this.animationSpeed = animationSpeed;
      me = this;
      this.el.on("mouseenter", function() {
        return me.show();
      });
      this.el.on("mouseleave", function() {
        return me.hide();
      });
    }

    Tooltip.prototype.animationMargin = 25;

    Tooltip.prototype.setText = function(text) {
      this.text = text;
      return this.setTooltipText();
    };

    Tooltip.prototype.setTooltipText = function() {
      return this.tooltip.children("p").text(this.text);
    };

    Tooltip.prototype.setDirection = function(direction) {
      this.direction = direction;
      return this.setTooltipDirection();
    };

    Tooltip.prototype.setTooltipDirection = function() {
      var $arrow;
      $arrow = this.tooltip.children("span");
      $arrow.removeClass().addClass("-cakedev-arrow");
      switch (this.direction) {
        case "left":
          $arrow.addClass("-cakedev-arrow-right-black");
          return this.setToLeft();
        case "right":
          $arrow.addClass("-cakedev-arrow-left-black");
          return this.setToRight();
        case "top":
          $arrow.addClass("-cakedev-arrow-down-black");
          return this.setToTop();
        default:
          $arrow.addClass("-cakedev-arrow-up-black");
          return this.setToBottom();
      }
    };

    Tooltip.prototype.show = function() {
      if (!(this.tooltip != null)) {
        this.tooltip = $("<div class='-cakedev-tooltip'><p /><span /></div>");
        $("body").append(this.tooltip);
      }
      this.setTooltipText();
      return this.setTooltipDirection();
    };

    Tooltip.prototype.hide = function() {
      var me;
      if (this.animate) {
        me = this;
        this.tooltip.stop();
        return this.tooltip.animate({
          opacity: 0
        }, this.animationSpeed, function() {
          $(this).remove();
          return me.tooltip = null;
        });
      } else {
        this.tooltip.remove();
        return this.tooltip = null;
      }
    };

    Tooltip.prototype.setToTop = function() {
      var left, top;
      top = this.el.offset().top - this.tooltip.outerHeight() - this.vMargin;
      left = this.el.offset().left + parseInt(this.el.outerWidth() / 2, 10) - parseInt(this.tooltip.outerWidth() / 2, 10);
      this.tooltip.css("margin-top", "-" + this.animationMargin + "px");
      return this.showTooltip(top, left);
    };

    Tooltip.prototype.setToRight = function() {
      var left, top;
      top = this.el.offset().top + parseInt(this.el.outerHeight() / 2, 10) - parseInt(this.tooltip.outerHeight() / 2, 10);
      left = this.el.offset().left + this.el.outerWidth() + this.hMargin;
      this.tooltip.css("margin-left", "" + this.animationMargin + "px");
      return this.showTooltip(top, left);
    };

    Tooltip.prototype.setToBottom = function() {
      var left, top;
      top = this.el.offset().top + this.el.outerHeight() + this.vMargin;
      left = this.el.offset().left + parseInt(this.el.outerWidth() / 2, 10) - parseInt(this.tooltip.outerWidth() / 2, 10);
      this.tooltip.css("margin-top", "" + this.animationMargin + "px");
      return this.showTooltip(top, left);
    };

    Tooltip.prototype.setToLeft = function() {
      var left, top;
      top = this.el.offset().top + parseInt(this.el.outerHeight() / 2, 10) - parseInt(this.tooltip.outerHeight() / 2, 10);
      left = this.el.offset().left - this.tooltip.outerWidth() - this.hMargin;
      this.tooltip.css("margin-left", "-" + this.animationMargin + "px");
      return this.showTooltip(top, left);
    };

    Tooltip.prototype.showTooltip = function(top, left) {
      var visibleProperties;
      this.tooltip.css({
        top: "" + top + "px",
        left: "" + left + "px"
      });
      visibleProperties = {
        opacity: 1,
        margin: "0px"
      };
      if (this.animate) {
        return this.tooltip.stop().animate(visibleProperties, this.animationSpeed);
      } else {
        return this.tooltip.css(visibleProperties).show();
      }
    };

    return Tooltip;

  })();

  jcakedev.plugins.attachable = {
    pluginManager: null,
    init: function(pm) {
      var me;
      this.pluginManager = pm;
      me = this;
      return $.fn.cakeAttach = function() {
        var action, args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (typeof args[0] === "string") {
          action = args[0];
          switch (action) {
            case "setDirection":
              pm.notify("Not implemented yet");
              break;
            default:
              pm.notify("'" + action + "' is not a valid action for cakeAttach");
          }
        } else {
          me.create(this, typeof args[0] === "object" ? args[0] : {});
        }
        return this;
      };
    },
    create: function($obj, params) {
      var direction, margin, me, zIndex;
      me = this;
      direction = params.direction != null ? params.direction : "top";
      margin = params.margin != null ? params.margin : 0;
      zIndex = params.zIndex != null ? params.zIndex : "auto";
      return $obj.each(function() {
        var attachable;
        attachable = new Attachable($(this), direction, margin, zIndex);
        return me.pluginManager.addComponent(attachable);
      });
    }
  };

  Attachable = (function() {

    function Attachable(el, direction, margin, zIndex) {
      this.el = el;
      this.direction = direction;
      this.margin = margin;
      this.zIndex = zIndex;
      this.el.css("z-index", this.zIndex);
      this.top = this.el.offset().top;
      this.left = this.el.offset().left;
    }

    return Attachable;

  })();

  $(document).on("scroll", function() {
    var $el, cmp, scrollTop, _i, _len, _ref;
    scrollTop = $(window).scrollTop();
    _ref = jcakedev.components;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cmp = _ref[_i];
      if (!(cmp instanceof Attachable)) {
        continue;
      }
      $el = cmp.el;
      if (!$el.hasClass("-cakedev-attachable") && scrollTop > (cmp.top - cmp.margin)) {
        cmp.originalWidth = $el.width("width");
        cmp.originalHeigh = $el.css("height");
        $el.css("width", $el.width());
        $el.css("height", $el.height());
        $el.addClass("-cakedev-attachable");
        $el.after("<div class='-cakedev-dummy' style='height: " + ($el.outerHeight()) + "px; width: " + ($el.outerWidth()) + "px;'></div>");
      } else if ($el.hasClass("-cakedev-attachable") && scrollTop <= (cmp.top - cmp.margin)) {
        $el.removeClass("-cakedev-attachable");
        $el.parent().children(".-cakedev-dummy").remove();
        $el.css("width", cmp.originalWidth);
        $el.css("height", cmp.originalHeigh);
      }
      if ($el.hasClass("-cakedev-attachable")) {
        $el.css("top", cmp.top);
        $el.css("left", cmp.left);
        if (cmp.direction === "top") {
          $el.css("top", "" + cmp.margin + "px");
        } else {
          $el.css("margin-bottom", "" + cmp.margin + "px");
        }
      } else {
        $el.css("top", "auto");
        $el.css("left", "auto");
      }
    }
    return true;
  });

  jcakedev.plugins.table = {
    pluginManager: null,
    init: function(pm) {
      var me;
      this.pluginManager = pm;
      me = this;
      return $.fn.cakeTable = function() {
        var action, args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (typeof args[0] === "string") {
          action = args[0];
          switch (action) {
            case "getSelected":
              pm.notify("Not implemented yet");
              break;
            case "setData":
              me.setData(this, args[1]);
              break;
            case "setLoading":
              me.setLoading(this);
              break;
            case "removeLoading":
              me.removeLoading(this);
              break;
            default:
              pm.notify("'" + action + "' is not a valid action for cakeTable");
          }
        } else {
          me.create(this, typeof args[0] === "object" ? args[0] : {});
        }
        return this;
      };
    },
    create: function($obj, params) {
      var data, editable, emptyMessage, erasable, fieldNames, fields, formats, maxRecords, me, onEdit, onErase, selectable;
      me = this;
      fields = params.fields != null ? params.fields : [];
      fieldNames = params.fieldNames != null ? params.fieldNames : {};
      data = params.data != null ? params.data : [];
      maxRecords = params.maxRecords != null ? params.maxRecords : 20;
      formats = params.formats != null ? params.formats : {};
      selectable = params.selectable != null ? params.selectable : false;
      editable = params.editable != null ? params.editable : false;
      erasable = params.erasable != null ? params.erasable : false;
      emptyMessage = params.emptyMessage != null ? params.emptyMessage : "...";
      onEdit = params.onEdit;
      onErase = params.onErase;
      return $obj.each(function() {
        var table;
        table = new Table($(this), fields, fieldNames, data, maxRecords, formats, selectable, editable, erasable, emptyMessage, onEdit, onErase);
        return me.pluginManager.addComponent(table);
      });
    },
    setData: function($obj, data) {
      var i, table, _i, _ref, _results;
      if (data instanceof Array) {
        _results = [];
        for (i = _i = 0, _ref = $obj.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          table = this.pluginManager.getComponent($obj.eq(i));
          if (table != null) {
            _results.push(table.setData(data));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    },
    setLoading: function($obj) {
      var i, table, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = $obj.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        table = this.pluginManager.getComponent($obj.eq(i));
        if (table != null) {
          _results.push(table.setLoading());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    removeLoading: function($obj) {
      var i, table, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = $obj.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        table = this.pluginManager.getComponent($obj.eq(i));
        if (table != null) {
          _results.push(table.removeLoading());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  };

  Table = (function() {

    function Table(el, fields, fieldNames, data, maxRecords, formats, selectable, editable, erasable, emptyMessage, onEdit, onErase) {
      var $pages, $records, $wrapper;
      this.el = el;
      this.fields = fields;
      this.fieldNames = fieldNames;
      this.data = data;
      this.maxRecords = maxRecords;
      this.formats = formats;
      this.selectable = selectable;
      this.editable = editable;
      this.erasable = erasable;
      this.emptyMessage = emptyMessage;
      this.onEdit = onEdit;
      this.onErase = onErase;
      this.loading = false;
      this.currentPage = 0;
      this.el.addClass("-cakedev-table");
      $wrapper = $("<div class='-cakedev-table-wrapper' />");
      $records = $("<table class='-cakedev-table-records' />");
      $pages = $("<div class='-cakedev-table-pages' />");
      $wrapper.append($records);
      $wrapper.append("<div class='-cakedev-table-loading' />");
      $wrapper.append("<div class='-cakedev-table-message'>" + this.emptyMessage + "</div>");
      this.el.append($wrapper);
      this.el.append($pages);
      this.setRecords();
    }

    Table.prototype.setData = function(data) {
      this.data = data;
      this.currentPage = 0;
      if (!this.loading) {
        return this.setRecords();
      }
    };

    Table.prototype.clearData = function() {
      return setData([]);
    };

    Table.prototype.showEmptyMessage = function() {
      return this.el.children(".-cakedev-table-wrapper").children(".-cakedev-table-message").show();
    };

    Table.prototype.hideEmptyMessage = function() {
      return this.el.children(".-cakedev-table-wrapper").children(".-cakedev-table-message").hide();
    };

    Table.prototype.getValueWithFormat = function(field, value) {
      var valueWithFormat;
      if (typeof this.formats[field] === "function") {
        valueWithFormat = this.formats[field].call(value, value);
        if (valueWithFormat != null) {
          value = valueWithFormat;
        }
      }
      if (value != null) {
        return value;
      } else {
        return "";
      }
    };

    Table.prototype.setRecords = function() {
      var $record, $records, end, field, i, start, value, _i, _j, _len, _ref;
      $records = this.el.find(".-cakedev-table-records");
      $records.empty();
      this.setHeaders();
      this.hideEmptyMessage();
      if (this.data.length) {
        start = this.currentPage * this.maxRecords;
        end = start + this.maxRecords;
        for (i = _i = start; start <= end ? _i < end : _i > end; i = start <= end ? ++_i : --_i) {
          if (i >= this.data.length) {
            break;
          }
          $record = $("<tr />");
          $record.append("<td class='-cakedev-table-recordActions' />");
          _ref = this.fields;
          for (_j = 0, _len = _ref.length; _j < _len; _j++) {
            field = _ref[_j];
            value = this.getValueWithFormat(field, this.data[i][field]);
            $record.append("<td>" + value + "</td>");
          }
          $records.append($record);
        }
        if (this.selectable) {
          this.setSelectable();
        }
        if (this.editable) {
          this.setEditable();
        }
        if (this.erasable) {
          this.setErasable();
        }
        $records.find("tr:last td").css("border", "none");
      } else {
        this.showEmptyMessage();
      }
      return this.setPages();
    };

    Table.prototype.setHeaders = function() {
      var $headers, field, fieldName, _i, _len, _ref;
      $headers = $("<tr />");
      $headers.append("<th />");
      _ref = this.fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        fieldName = this.fieldNames[field] != null ? this.fieldNames[field] : field;
        $headers.append("<th>" + fieldName + "</th>");
      }
      return this.el.find(".-cakedev-table-records").append($headers);
    };

    Table.prototype.setPages = function() {
      var $page, $pages, i, me, pagesCount, _i;
      me = this;
      $pages = this.el.children(".-cakedev-table-pages");
      $pages.empty();
      pagesCount = Math.ceil(this.data.length / this.maxRecords);
      for (i = _i = 0; 0 <= pagesCount ? _i < pagesCount : _i > pagesCount; i = 0 <= pagesCount ? ++_i : --_i) {
        $page = $("<a class='-cakedev-table-page' href='#'>" + (i + 1) + "</a>");
        $page.data("pageIndex", i);
        $page.on("click", function() {
          var index;
          index = $(this).data("pageIndex");
          if (index !== me.currentPage) {
            me.setPage(index);
          }
          return false;
        });
        $pages.append($page);
      }
      $pages.children(".-cakedev-table-page").eq(this.currentPage).addClass("-cakedev-table-currentPage");
      if (this.data.length) {
        this.setNavigationControls();
        return this.setInfo();
      }
    };

    Table.prototype.setNavigationControls = function() {
      var $beginning, $end, $next, $pages, $previous, lastPage, me;
      me = this;
      $pages = this.el.children(".-cakedev-table-pages");
      $previous = $("<a href='#'>&laquo; Anterior</a>");
      $next = $("<a href='#'>Siguiente &raquo;</a>");
      $beginning = $("<a href='#'>Ir al inicio</a>");
      $end = $("<a href='#'>Ir al final</a>");
      lastPage = Math.ceil(this.data.length / this.maxRecords) - 1;
      if (lastPage < 0) {
        lastPage = 0;
      }
      $previous.on("click", function() {
        if (me.currentPage > 0) {
          me.setPage(me.currentPage - 1);
        }
        return false;
      });
      $beginning.on("click", function() {
        me.setPage(0);
        return false;
      });
      $next.on("click", function() {
        if (me.currentPage < lastPage) {
          me.setPage(me.currentPage + 1);
        }
        return false;
      });
      $end.on("click", function() {
        me.setPage(lastPage);
        return false;
      });
      return $pages.prepend($end).prepend($next).prepend($previous).prepend($beginning);
    };

    Table.prototype.setInfo = function() {
      var beginning, end;
      beginning = this.currentPage * this.maxRecords;
      end = beginning + this.maxRecords;
      if (end > this.data.length) {
        end = this.data.length;
      }
      return this.el.children(".-cakedev-table-pages").append("<span class='-cakedev-table-info'>Mostrando " + (beginning + 1) + " a " + end + " de " + this.data.length + "</span>");
    };

    Table.prototype.setPage = function(index) {
      this.currentPage = index;
      return this.setRecords();
    };

    Table.prototype.setSelectable = function() {
      return false;
    };

    Table.prototype.setEditable = function() {
      var $action, $actions, currentIndex, i, me, _i, _ref, _results;
      $actions = this.el.find(".-cakedev-table-records").find(".-cakedev-table-recordActions");
      currentIndex = this.currentPage * this.maxRecords;
      me = this;
      _results = [];
      for (i = _i = 0, _ref = $actions.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        $action = $("<span class='-cakedev-table-action -cakedev-edit-icon' />");
        $action.data("cakedevIndex", currentIndex);
        $action.on("click", function() {
          return me.raiseOnEdit($(this).data("cakedevIndex"));
        });
        $actions.eq(i).append($action);
        _results.push(currentIndex++);
      }
      return _results;
    };

    Table.prototype.raiseOnEdit = function(index) {
      if (typeof this.onEdit === "function") {
        return this.onEdit.call(this.el, this.data[index], index);
      }
    };

    Table.prototype.setErasable = function() {
      var $action, $actions, currentIndex, i, me, _i, _ref, _results;
      $actions = this.el.find(".-cakedev-table-records").find(".-cakedev-table-recordActions");
      currentIndex = this.currentPage * this.maxRecords;
      me = this;
      _results = [];
      for (i = _i = 0, _ref = $actions.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        $action = $("<span class='-cakedev-table-action -cakedev-trash-icon' />");
        $action.data("cakedevIndex", currentIndex);
        $action.on("click", function() {
          return me.raiseOnErase($(this).data("cakedevIndex"));
        });
        $actions.eq(i).append($action);
        _results.push(currentIndex++);
      }
      return _results;
    };

    Table.prototype.raiseOnErase = function(index) {
      if (typeof this.onErase === "function") {
        return this.onErase.call(this.el, this.data[index], index);
      }
    };

    Table.prototype.clearRecords = function() {
      this.el.find(".-cakedev-table-records").find("tr").not(":first").remove();
      this.el.children(".-cakedev-table-pages").empty();
      return this.hideEmptyMessage();
    };

    Table.prototype.setLoading = function() {
      this.clearRecords();
      this.el.children(".-cakedev-table-wrapper").children(".-cakedev-table-loading").show();
      return this.loading = true;
    };

    Table.prototype.removeLoading = function() {
      this.el.children(".-cakedev-table-wrapper").children(".-cakedev-table-loading").hide();
      this.setRecords();
      return this.loading = false;
    };

    return Table;

  })();

  jcakedev.plugins.panel = {
    pluginManager: null,
    init: function(pm) {
      var me;
      this.pluginManager = pm;
      me = this;
      return $.fn.cakePanel = function() {
        var action, args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (typeof args[0] === "string") {
          action = args[0];
          switch (action) {
            case "show":
              me.show(this);
              break;
            case "hide":
              me.hide(this);
              break;
            case "setTitle":
              me.setTitle(this, args[1]);
              break;
            default:
              pm.notify("'" + action + "' is not a valid action for cakePanel");
          }
        } else {
          me.create(this, typeof args[0] === "object" ? args[0] : {});
        }
        return this;
      };
    },
    create: function($obj, params) {
      var closable, draggable, height, me, modal, title, width;
      me = this;
      title = params.title;
      modal = params.modal != null ? params.modal : true;
      draggable = params.draggable != null ? params.draggable : true;
      closable = params.closable != null ? params.closable : true;
      width = params.width != null ? "" + params.width + "px" : "auto";
      height = params.height != null ? "" + params.height + "px" : "auto";
      return $obj.each(function() {
        var panel;
        panel = new Panel($(this), title, modal, draggable, closable, width, height);
        return me.pluginManager.addComponent(panel);
      });
    },
    show: function($obj) {
      var me;
      me = this;
      return $obj.each(function() {
        var panel;
        panel = me.pluginManager.getComponent($(this));
        if (panel != null) {
          return panel.show();
        }
      });
    },
    hide: function($obj) {
      var me;
      me = this;
      return $obj.each(function() {
        var panel;
        panel = me.pluginManager.getComponent($(this));
        if (panel != null) {
          return panel.hide();
        }
      });
    },
    setTitle: function($obj, title) {
      var me;
      me = this;
      return $obj.each(function() {
        var panel;
        panel = me.pluginManager.getComponent($(this));
        if (panel != null) {
          return panel.setTitle(title);
        }
      });
    }
  };

  Panel = (function() {

    function Panel(el, title, modal, draggable, closable, width, height) {
      var $wrapperContent, me;
      this.el = el;
      this.title = title;
      this.modal = modal;
      this.draggable = draggable;
      this.closable = closable;
      this.width = width;
      this.height = height;
      me = this;
      this.panel = $("<div class='-cakedev-panel' />");
      if (this.modal) {
        this.wrapper = $("<div class='-cakedev-panel-wrapper' />");
        this.wrapper.append("<div class='-cakedev-panel-wrapper-bg' />");
        this.wrapper.insertBefore(this.el);
        $wrapperContent = $("<div class='-cakedev-panel-wrapper-content' />");
        this.wrapper.append($wrapperContent);
        $wrapperContent.append(this.panel);
        $wrapperContent.on("click", function(event) {
          if ($(event.target).hasClass("-cakedev-panel-wrapper-content")) {
            if (me.closable) {
              return me.hide();
            }
          }
        });
      } else {
        this.panel.insertBefore(this.el);
      }
      this.header = $("<div class='-cakedev-panel-header' />");
      this.panel.append(this.header);
      this.panel.append(this.el);
      this.panel.append("<div class='-cakedev-bottom-margin' />");
      this.panel.css("width", this.width);
      this.panel.css("height", this.height);
      this.draggingOffset = null;
      this.setTitle(this.title);
      this.setClosable(this.closable);
    }

    Panel.prototype.setTitle = function(title) {
      if ((title != null) && typeof title === "string") {
        this.usingTitleBar = true;
        if (this.header.hasClass("-cakedev-panel-titlebar")) {
          this.header.children("h1").text(title);
        } else {
          this.header.addClass("-cakedev-panel-titlebar");
          this.header.append("<h1>" + title + "</h1>");
        }
      } else {
        this.usingTitleBar = false;
        this.header.removeClass("-cakedev-panel-titlebar");
        this.header.children("h1").remove();
      }
      return this.setDraggable(this.draggable);
    };

    Panel.prototype.onMousemove = function(event) {
      if (this.draggingOffset != null) {
        return this.panel.offset({
          top: event.pageY - this.draggingOffset.top,
          left: event.pageX - this.draggingOffset.left
        });
      }
    };

    Panel.prototype.setDraggable = function(allowDrag) {
      var me;
      this.header.removeClass("-cakedev-draggable");
      this.header.off("mousedown");
      if (allowDrag && this.usingTitleBar) {
        me = this;
        this.header.addClass("-cakedev-draggable");
        return this.header.on("mousedown", function(event) {
          me.draggingOffset = {
            top: event.pageY - me.panel.offset().top,
            left: event.pageX - me.panel.offset().left
          };
          return event.preventDefault();
        });
      }
    };

    Panel.prototype.setClosable = function(allowClose) {
      var $closeBtn;
      $closeBtn = this.header.children(".-cakedev-close-button");
      if (allowClose) {
        if (!$closeBtn.length) {
          return this.header.append(this.getCloseButton());
        }
      } else {
        if ($closeBtn.length) {
          return $closeBtn.remove();
        }
      }
    };

    Panel.prototype.getCloseButton = function() {
      var $closeBtn, me;
      me = this;
      $closeBtn = $("<button class='-cakedev-close-button' />");
      $closeBtn.on("click", function() {
        return me.el.cakePanel("hide");
      });
      return $closeBtn;
    };

    Panel.prototype.show = function() {
      if (this.modal) {
        this.showModal();
      } else {
        this.panel.show();
      }
      return this.centerPanel();
    };

    Panel.prototype.hide = function() {
      if (this.modal) {
        return this.hideModal();
      } else {
        return this.panel.hide();
      }
    };

    Panel.prototype.showModal = function(callback) {
      var me;
      me = this;
      $("body").css("overflow", "hidden");
      return this.wrapper.fadeIn("fast", function() {
        return me.panel.show();
      });
    };

    Panel.prototype.hideModal = function(callback) {
      this.panel.hide();
      return this.wrapper.fadeOut("fast", function() {
        if (!$(".-cakedev-panel-wrapper:visible").length) {
          return $("body").css("overflow", "visible");
        }
      });
    };

    Panel.prototype.centerPanel = function() {
      this.panel.css("top", "50%");
      this.panel.css("margin-top", "-" + (Math.round(this.panel.height() / 2)) + "px");
      this.panel.css("left", "50%");
      return this.panel.css("margin-left", "-" + (Math.round(this.panel.width() / 2)) + "px");
    };

    return Panel;

  })();

  $(document).on("mousemove", function(event) {
    var cmp, _i, _len, _ref, _results;
    _ref = jcakedev.components;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cmp = _ref[_i];
      if (cmp instanceof Panel) {
        _results.push(cmp.onMousemove.apply(cmp, [event]));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  });

  $(document).on("mouseup", function() {
    var cmp, _i, _len, _ref, _results;
    _ref = jcakedev.components;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cmp = _ref[_i];
      if (cmp instanceof Panel) {
        _results.push(cmp.draggingOffset = null);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  });

  if (typeof jQuery !== "undefined" && jQuery !== null) {
    jcakedev.init(jQuery);
  } else {
    console.log("jQuery not found");
  }

}).call(this);
