// Generated by CoffeeScript 1.3.3

/*
jCaKeDev 1.2.6
cakedevp.github.com/jcakedev
*/


(function() {
  var Combo, Table, jcakedev,
    __slice = [].slice;

  jcakedev = {
    plugins: {},
    elements: [],
    getElement: function(id) {
      var el, element, _i, _len, _ref;
      element = null;
      _ref = this.elements;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        if (el.id === id) {
          element = el;
          break;
        }
      }
      return element;
    },
    addElement: function(element) {
      return this.elements.push(element);
    },
    removeElement: function(id) {
      var el, i, index, _i, _len, _ref;
      index = -1;
      _ref = this.elements;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        el = _ref[i];
        if (el.id === id) {
          index = i;
          break;
        }
      }
      if (index > -1) {
        return this.elements.splice(index, 1);
      }
    },
    newID: function() {
      return Math.random().toString().substring(2);
    },
    init: function($) {
      var plugin, _results;
      _results = [];
      for (plugin in this.plugins) {
        _results.push(this.plugins[plugin].init(this));
      }
      return _results;
    }
  };

  jcakedev.plugins.combo = {
    pluginManager: null,
    init: function(pm) {
      var me;
      this.pluginManager = pm;
      me = this;
      return $.fn.cakeCombo = function() {
        var action, args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (typeof args[0] === "string") {
          action = args[0];
          switch (action) {
            case "getValue":
              return me.getValue(this);
            case "setValue":
              console.log("Under development...");
              break;
            default:
              console.log("'" + action + "' is not a valid action for cakeCombo");
          }
        } else {
          me.create(this, typeof args[0] === "object" ? args[0] : {});
        }
        return this;
      };
    },
    create: function($elements, params) {
      var defaultValue, delegate, me, options;
      me = this;
      if ((params.options != null) && params.options.length) {
        options = params.options;
        delegate = params.delegate;
        defaultValue = params.defaultValue;
        return $elements.each(function() {
          var combo;
          combo = new Combo(me.pluginManager.newID(), $(this), options, delegate);
          if (defaultValue != null) {
            combo.setValue(defaultValue);
          }
          return me.pluginManager.addElement(combo);
        });
      } else {
        console.log("No options were defined for combo(s)");
        return $elements;
      }
    },
    getValue: function($element) {
      var combo;
      combo = this.pluginManager.getElement($element.data("jcakedevId"));
      if (combo != null) {
        return combo.getValue();
      } else {
        return null;
      }
    }
  };

  Combo = (function() {

    function Combo(id, element, options, delegate) {
      var $comboElement, me;
      this.id = id;
      this.element = element;
      this.options = options;
      this.delegate = delegate;
      this.element.data("jcakedevId", this.id);
      this.selectedIndex = 0;
      this.element.addClass("-cakedev-combo");
      $comboElement = $("<table class='-cakedev-combo-element' />");
      $comboElement.append("<tr>" + "<td class='-cakedev-combo-optionText'></td>" + "<td class='-cakedev-combo-arrow'><span class='-cakedev-arrow -cakedev-arrow-down-black'></span></td>" + "</tr>");
      this.element.append($comboElement);
      this.setOptions();
      this.setCurrentOption();
      me = this;
      $comboElement.on("mouseenter", function() {
        me.showList(true);
        return me.setFocus(true);
      });
      $comboElement.on("mouseleave", function(event) {
        var $target;
        $target = event.toElement != null ? $(event.toElement) : $(event.relatedTarget);
        if (!$target.hasClass("-cakedev-combo-list-container") && !$target.closest(".-cakedev-combo-list-container").length) {
          me.hideList(true);
          me.setFocus(false);
        }
        return true;
      });
    }

    Combo.prototype.showList = function(animate) {
      var $el;
      $el = this.element.children(".-cakedev-combo-list-container");
      $el.stop().show();
      if (animate) {
        return $el.stop().animate({
          opacity: 1.0
        }, 100);
      } else {
        return $el.css("opacity", 1.0);
      }
    };

    Combo.prototype.hideList = function(animate) {
      var $el;
      $el = this.element.children(".-cakedev-combo-list-container");
      if (animate) {
        return $el.stop().animate({
          opacity: 0
        }, 100, function() {
          return $el.hide();
        });
      } else {
        $el.stop().hide();
        return $el.css("opacity", 0);
      }
    };

    Combo.prototype.setOptions = function() {
      var $list, $listContainer, me, option, _i, _len, _ref;
      me = this;
      $listContainer = $("<div class='-cakedev-combo-list-container' />");
      $list = $("<ul />");
      _ref = this.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        $list.append("<li>" + option.text + "</li>");
      }
      $listContainer.append($list);
      $list.children("li").each(function(index) {
        return $(this).on("click", function(event) {
          if (me.selectedIndex !== index) {
            if (typeof me.delegate === "function") {
              me.delegate.call(me.element, me.options[index]);
            }
            me.setValue(me.options[index].value);
            me.setFocus(false);
            me.hideList(false);
            return true;
          }
        });
      });
      $listContainer.on("mouseleave", function(event) {
        var $target;
        $target = event.toElement != null ? $(event.toElement) : $(event.relatedTarget);
        if (!$target.hasClass("-cakedev-combo-element") && !$target.closest(".-cakedev-combo-element").length) {
          me.hideList(true);
          me.setFocus(false);
        }
        return true;
      });
      return this.element.append($listContainer);
    };

    Combo.prototype.setCurrentOption = function() {
      var $options;
      this.element.children("table").find(".-cakedev-combo-optionText").text(this.options[this.selectedIndex].text);
      $options = this.element.children(".-cakedev-combo-list-container").children("ul").children("li");
      $options.removeClass("-cakedev-combo-selectedOption");
      return $options.eq(this.selectedIndex).addClass("-cakedev-combo-selectedOption");
    };

    Combo.prototype.setFocus = function(focus) {
      if (focus) {
        return this.element.children(".-cakedev-combo-element").addClass("-cakedev-combo-focused");
      } else {
        return this.element.children(".-cakedev-combo-element").removeClass("-cakedev-combo-focused");
      }
    };

    Combo.prototype.setValue = function(value) {
      var i, option, _i, _len, _ref;
      if (this.getValue() !== value) {
        _ref = this.options;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          option = _ref[i];
          if (option.value === value) {
            this.selectedIndex = i;
            break;
          }
        }
        return this.setCurrentOption();
      }
    };

    Combo.prototype.getValue = function() {
      return this.options[this.selectedIndex].value;
    };

    return Combo;

  })();

  jcakedev.plugins.table = {
    pluginManager: null,
    init: function(pm) {
      var me;
      this.pluginManager = pm;
      me = this;
      return $.fn.cakeTable = function() {
        var action, args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (typeof args[0] === "string") {
          action = args[0];
          switch (action) {
            case "getSelected":
              console.log("Under development...");
              break;
            default:
              console.log("'" + action + "' is not a valid action for cakeTable");
          }
        } else {
          me.create(this, typeof args[0] === "object" ? args[0] : {});
        }
        return this;
      };
    },
    create: function($elements, params) {
      var data, editable, erasable, fieldNames, fields, maxRecords, me, selectable;
      me = this;
      fields = params.fields != null ? params.fields : [];
      fieldNames = params.fieldNames != null ? params.fieldNames : {};
      data = params.data != null ? params.data : [];
      maxRecords = params.maxRecords != null ? params.maxRecords : 20;
      selectable = params.selectable != null ? params.selectable : false;
      editable = params.editable != null ? params.editable : false;
      erasable = params.erasable != null ? params.erasable : false;
      return $elements.each(function() {
        var table;
        table = new Table(me.pluginManager.newID(), $(this), fields, fieldNames, data, maxRecords, selectable, editable, erasable);
        return me.pluginManager.addElement(table);
      });
    }
  };

  Table = (function() {

    function Table(id, element, fields, fieldNames, data, maxRecords, selectable, editable, erasable) {
      var $pages, $records, $wrapper;
      this.id = id;
      this.element = element;
      this.fields = fields;
      this.fieldNames = fieldNames;
      this.data = data;
      this.maxRecords = maxRecords;
      this.selectable = selectable;
      this.editable = editable;
      this.erasable = erasable;
      this.element.data("jcakedevId", this.id);
      this.currentPage = 0;
      this.element.addClass("-cakedev-table");
      $wrapper = $("<div class='-cakedev-table-wrapper' />");
      $records = $("<table class='-cakedev-table-records' />");
      $pages = $("<div class='-cakedev-table-pages' />");
      $wrapper.append($records);
      this.element.append($wrapper);
      this.element.append($pages);
      this.setRecords();
    }

    Table.prototype.setRecords = function() {
      var $record, $records, end, field, i, start, value, _i, _j, _len, _ref;
      $records = this.element.find(".-cakedev-table-records");
      $records.empty();
      this.setHeaders();
      start = this.currentPage * this.maxRecords;
      end = start + this.maxRecords;
      for (i = _i = start; start <= end ? _i < end : _i > end; i = start <= end ? ++_i : --_i) {
        if (i >= this.data.length) {
          break;
        }
        $record = $("<tr />");
        $record.append("<td class='-cakedev-table-recordActions' />");
        _ref = this.fields;
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          field = _ref[_j];
          value = this.data[i][field] != null ? this.data[i][field] : "";
          $record.append("<td>" + value + "</td>");
        }
        $records.append($record);
      }
      $records.find("tr:last td").css("border", "none");
      this.setPages();
      if (this.selectable) {
        this.setSelectable();
      }
      if (this.editable) {
        this.setEditable();
      }
      if (this.erasable) {
        return this.setErasable();
      }
    };

    Table.prototype.setHeaders = function() {
      var $headers, field, fieldName, _i, _len, _ref;
      $headers = $("<tr />");
      $headers.append("<th />");
      _ref = this.fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        fieldName = this.fieldNames[field] != null ? this.fieldNames[field] : field;
        $headers.append("<th>" + fieldName + "</th>");
      }
      return this.element.find(".-cakedev-table-records").append($headers);
    };

    Table.prototype.setPages = function() {
      var $page, $pages, i, me, pagesCount, _i;
      me = this;
      $pages = this.element.children(".-cakedev-table-pages");
      $pages.empty();
      pagesCount = Math.ceil(this.data.length / this.maxRecords);
      for (i = _i = 0; 0 <= pagesCount ? _i < pagesCount : _i > pagesCount; i = 0 <= pagesCount ? ++_i : --_i) {
        $page = $("<a class='-cakedev-table-page' href='#'>" + (i + 1) + "</a>");
        $page.data("pageIndex", i);
        $page.on("click", function() {
          me.setPage($(this).data("pageIndex"));
          return false;
        });
        $pages.append($page);
      }
      $pages.children(".-cakedev-table-page").eq(this.currentPage).addClass("-cakedev-table-currentPage");
      return this.setNavigationControls();
    };

    Table.prototype.setNavigationControls = function() {
      var $beginning, $end, $next, $pages, $previous, lastPage, me;
      me = this;
      $pages = this.element.children(".-cakedev-table-pages");
      $previous = $("<a href='#'>&laquo; Anterior</a>");
      $next = $("<a href='#'>Siguiente &raquo;</a>");
      $beginning = $("<a href='#'>Ir al inicio</a>");
      $end = $("<a href='#'>Ir al final</a>");
      lastPage = Math.ceil(this.data.length / this.maxRecords) - 1;
      $previous.on("click", function() {
        if (me.currentPage > 0) {
          me.setPage(me.currentPage - 1);
        }
        return false;
      });
      $beginning.on("click", function() {
        me.setPage(0);
        return false;
      });
      $next.on("click", function() {
        if (me.currentPage < lastPage) {
          me.setPage(me.currentPage + 1);
        }
        return false;
      });
      $end.on("click", function() {
        me.setPage(lastPage);
        return false;
      });
      return $pages.prepend($previous).prepend($beginning).append($next).append($end);
    };

    Table.prototype.setPage = function(index) {
      this.currentPage = index;
      return this.setRecords();
    };

    Table.prototype.setSelectable = function() {
      return false;
    };

    Table.prototype.setEditable = function() {
      var $actions, i, _i, _ref, _results;
      $actions = this.element.find(".-cakedev-table-records").find(".-cakedev-table-recordActions");
      _results = [];
      for (i = _i = 0, _ref = $actions.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push($actions.eq(i).append("<span class='-cakedev-table-action -cakedev-edit-icon' />"));
      }
      return _results;
    };

    Table.prototype.setErasable = function() {
      var $actions, i, _i, _ref, _results;
      $actions = this.element.find(".-cakedev-table-records").find(".-cakedev-table-recordActions");
      _results = [];
      for (i = _i = 0, _ref = $actions.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push($actions.eq(i).append("<span class='-cakedev-table-action -cakedev-trash-icon' />"));
      }
      return _results;
    };

    return Table;

  })();

  if (typeof jQuery !== "undefined" && jQuery !== null) {
    jcakedev.init(jQuery);
  } else {
    console.log("jQuery not found");
  }

}).call(this);
